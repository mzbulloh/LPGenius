# -*- coding: utf-8 -*-
"""LPG Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12OgAaQOfN29fKl_ZgJGF5LMOE0Hk_OEQ
"""

,!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="t44JbzUXZBbk2HR7ufG0")
project = rf.workspace("test-ghygk").project("lpg-6fzeo")
version = project.version(2)
dataset = version.download("yolov8")

!pip install ultralytics

from ultralytics import YOLO

model = YOLO("yolov8s.pt")

# Training model
model.train(
    data="/content/LPG-2/data.yaml",
    epochs=10,
    imgsz=640,
    batch=10,
)

from ultralytics.utils.plotting import plot_results
from IPython.display import Image, display
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
plot_results("runs/detect/train3/results.csv")
plt.show()

display(Image("runs/detect/train3/results.png", width=600))

print(model.names)

from ultralytics import YOLO
import cv2
import matplotlib.pyplot as plt

model = YOLO("runs/detect/train3/weights/best.pt")

image_paths = [
    "/content/foto lpg.jpeg",
    "/content/lpg.jpg",
    "/content/lpg dari atas.jpeg"
]

plt.figure(figsize=(16, 8))


CLASS_COLORS = {
    "berkarat": (0, 0, 255),       # Red for rusted
    "tidak_berkarat": (0, 255, 0), # Green for not rusted
    "lpg_3kg": (255, 0, 0)         # Blue for LPG cylinder (overall)
}

FONT_SCALE = 0.25
LINE_THICKNESS = 1
TEXT_THICKNESS = 1

for i, image_path in enumerate(image_paths):
    results = model(image_path)

    img = cv2.imread(image_path)
    if img is None:
        print(f"Error: Could not load image {image_path}. Skipping.")
        continue

    class_names = model.names
    count = {
        "berkarat": 0,
        "tidak_berkarat": 0,
        "lpg_3kg": 0
    }

    for box in results[0].boxes:
        # Get coordinates, confidence, and class ID
        x1, y1, x2, y2 = map(int, box.xyxy[0])
        conf = float(box.conf[0])
        cls_id = int(box.cls[0])
        class_name = class_names[cls_id]

        if class_name in count:
            count[class_name] += 1

        color = CLASS_COLORS.get(class_name, (200, 200, 200))

        cv2.rectangle(img, (x1, y1), (x2, y2), color, LINE_THICKNESS)

        label = f"{class_name}: {conf:.2f}"

        (text_width, text_height), baseline = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, FONT_SCALE, TEXT_THICKNESS)

        cv2.rectangle(img, (x1, y1 - text_height - baseline), (x1 + text_width, y1), color, -1)

        cv2.putText(img, label, (x1, y1 - baseline), cv2.FONT_HERSHEY_SIMPLEX, FONT_SCALE, (255, 255, 255), TEXT_THICKNESS, cv2.LINE_AA) # White text

    total_berlabel = count["berkarat"] + count["tidak_berkarat"]

    print(f"ðŸ“¸ Gambar {i+1}: {image_path}")
    print("Total LPG 3kg:", count["lpg_3kg"])
    print("Jumlah Berkarat:", count["berkarat"])
    print("Jumlah Tidak Berkarat:", count["tidak_berkarat"])
    print("Total LPG Berlabel (berkarat + tidak_berkarat):", total_berlabel)
    print("-" * 60)

    output_path = f"hasil_deteksi_custom_{i+1}.jpg"
    cv2.imwrite(output_path, img)

    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    plt.subplot(1, 3, i + 1)
    plt.imshow(img_rgb)
    plt.title(
        f"Gambar {i+1}\nLPG: {count['lpg_3kg']} | Karat: {count['berkarat']} | Tidak Karat: {count['tidak_berkarat']}"
    )
    plt.axis("off")

plt.tight_layout()
plt.show()